name: Build AKS demo

# Controls when the action will run. Workflow runs when manually triggered using the UI
# or API.
on:
  workflow_dispatch:
    # Inputs the workflow accepts.
    # inputs:
      # name:
        # Friendly description to be shown in the UI instead of 'name'
        # description: 'Person to greet'
        # Default value if no value is explicitly provided
        # default: 'World'
        # Input has to be provided for the workflow to run
        # required: true
jobs:
  deployAksDemo:
    runs-on: ubuntu-latest

    steps:
      - uses: actions/checkout@v2
 
      - name: Install Bicep CLI
        run: | 
          curl -Lo bicepinstall https://github.com/Azure/bicep/releases/latest/download/bicep-linux-x64
          chmod +x ./bicepinstall
          sudo mv ./bicepinstall /usr/local/bin/bicep
          bicep -v
       
      - name: Build Bicep template
        run: bicep build ./declarative/infra/maintemplate.bicep

      - name: Azure login
        uses: azure/login@v1
        with:
          creds: ${{ secrets.AZURE_CREDENTIALS }}

      - name: Ensure Resource Group exists
        uses: Azure/CLI@v1
        with:
          inlineScript: |
            #!/bin/bash
            if $(az group exists -n aks-demo) ; then
              echo "Azure resource group already exists, skipping creation..."
            else
              az group create -n aks-demo --location westeurope
              echo "Azure resource group created"
            fi

      - name: Deploy infrastructure
        uses: azure/arm-deploy@v1
        id: deploy
        with:
          resourceGroupName: aks-demo
          template: ./declarative/infra/maintemplate.json
          parameters: >-
            sshKey="${{ secrets.SSH_PUBLIC_KEY }}" 
            userObjectId=${{ secrets.USER_OBJECT_ID }} 
            userName=${{ secrets.USER_NAME }} 
            twitterConsumerKey=${{ secrets.twitterConsumerKey }}  
            twitterConsumerSecret=${{ secrets.twitterConsumerSecret }}  
            twitterAccessToken=${{ secrets.twitterAccessToken }}  
            twitterAccessSecret=${{ secrets.twitterAccessSecret }} 
            aksVersion="1.21.2"

      - name: Import images to ACR
        uses: Azure/CLI@v1
        with:
          inlineScript: |
            az acr import -n ${{ steps.deploy.outputs.acrName }} --source docker.io/library/alpine:latest -t alpine:latest --force

      - name: Deploy Pod identity
        uses: Azure/CLI@v1
        with:
          inlineScript: |
            #!/bin/bash
            export rg=aks-demo
            az extension add -n aks-preview -y
            az aks update --enable-pod-identity -n aks-demo -g $rg
            az aks pod-identity add -g $rg \
                --cluster-name aks-demo \
                --namespace default \
                --name external-dns \
                --identity-resource-id $(az identity show -n externalDns -g $rg --query id -o tsv)
            az aks pod-identity add -g $rg \
                --cluster-name aks-demo \
                --namespace default \
                --name secrets-reader \
                --identity-resource-id $(az identity show -n secretsReader -g $rg --query id -o tsv)
            az aks pod-identity add -g $rg \
                --cluster-name aks-demo \
                --namespace opentelemetry \
                --name secrets-reader \
                --identity-resource-id $(az identity show -n secretsReader -g $rg --query id -o tsv)
            az aks pod-identity add -g $rg \
                --cluster-name aks-demo \
                --namespace dapr \
                --name secrets-reader \
                --identity-resource-id $(az identity show -n secretsReader -g $rg --query id -o tsv)
            az aks pod-identity add -g $rg \
                --cluster-name aks-demo \
                --namespace keda \
                --name secrets-reader \
                --identity-resource-id $(az identity show -n secretsReader -g $rg --query id -o tsv)
            az aks pod-identity add -g $rg \
                --cluster-name aks-demo \
                --namespace default \
                --name psql-user \
                --identity-resource-id $(az identity show -n psqlUser -g $rg --query id -o tsv)
            az aks pod-identity add -g $rg \
                --cluster-name aks-demo \
                --namespace keda \
                --name keda \
                --identity-resource-id $(az identity show -n keda -g $rg --query id -o tsv)

      - name: Get AKS credentials
        uses: Azure/aks-set-context@v1
        with:
          creds: '${{ secrets.AZURE_CREDENTIALS }}'
          cluster-name: aks-demo
          resource-group: aks-demo

      - name: Prepare values.yaml
        run: | 
          echo subscriptionId: ${{ steps.deploy.outputs.subscriptionId }} > values.yaml
          echo tenantId: ${{ steps.deploy.outputs.tenantId }}  >> values.yaml
          echo rg: ${{ steps.deploy.outputs.resourceGroupName }}   >> values.yaml
          echo aksNodeResourceGroup: ${{ steps.deploy.outputs.aksNodeResourceGroup }}   >> values.yaml
          echo dnsZone: ${{ steps.deploy.outputs.dnsZoneName }}  >> values.yaml
          echo keyvaultName: ${{ steps.deploy.outputs.keyvaultName }}   >> values.yaml
          echo keyvaultIdentity: ${{ steps.deploy.outputs.keyvaultIdentity }}  >> values.yaml
          echo appGwDns: ${{ steps.deploy.outputs.appGwDns }}  >> values.yaml
          echo storageName: ${{ steps.deploy.outputs.storageName }}  >> values.yaml
          echo acrName: ${{ steps.deploy.outputs.acrName }}  >> values.yaml

      - name: Push configurations to cluster in default namespace
        uses: azure/k8s-create-secret@v1
        with:
          namespace: default
          secret-type: generic
          arguments: |
            --from-file=values.yaml
          secret-name: configurations

      - name: Push configurations to cluster in secure namespace
        uses: azure/k8s-create-secret@v1
        with:
          namespace: secure
          secret-type: generic
          arguments: |
            --from-file=values.yaml
          secret-name: configurations


      - name: Connect cluster to arc
        uses: Azure/CLI@v1
        with:
          inlineScript: |
            #!/bin/bash
            az extension add --name connectedk8s -y
            az extension add --name k8s-extension -y
            az connectedk8s connect -g aks-demo -n aks-demo --custom-locations-oid '51dfe1e8-70c6-4de5-a08e-e18aff23d815'

      - name: Onboard cluster to GitOps
        uses: Azure/CLI@v1
        with:
          inlineScript: |
            #!/bin/bash
            az extension add --name k8s-configuration -y
            az k8s-configuration create -c aks-demo \
              --cluster-type connectedClusters \
              -n common \
              -g aks-demo \
              --operator-type flux \
              --operator-params "'--git-readonly --git-path gitops/common'" \
              --repository-url https://github.com/tkubica12/aks-demo \
              --enable-helm-operator \
              --helm-operator-params '--set helm.versions=v3' \
              --scope cluster


      # - name: Onboard Arc Data Controller
      #   uses: Azure/CLI@v1
      #   with:
      #     inlineScript: |
      #       #!/bin/bash
      #       az k8s-extension create -c aks-demo -g aks-demo --name arc-data-services \
      #         --cluster-type connectedClusters --extension-type microsoft.arcdataservices \
      #         --auto-upgrade true --scope cluster --release-namespace azure-arc --config Microsoft.CustomLocation.ServiceAccount=sa-bootstrapper


      # - name: Onboard cluster to Arc
      #   uses: Azure/CLI@v1
      #   with:
      #     inlineScript: |
      #       #!/bin/bash
      #       az extension add --name connectedk8s -y
      #       az extension add --name k8s-extension -y
      #       az connectedk8s connect -g aks-demo -n aks-demo --custom-locations-oid '51dfe1e8-70c6-4de5-a08e-e18aff23d815'
      #       az k8s-extension create -c aks-demo -g aks-demo --name arc-data-services \
      #         --cluster-type connectedClusters --extension-type microsoft.arcdataservices \
      #         --auto-upgrade true --scope cluster --release-namespace azure-arc --config Microsoft.CustomLocation.ServiceAccount=sa-bootstrapper
            # export hostClusterId=$(az connectedk8s show -g aks-demo -n aks-demo --query id -o tsv)
            # export extensionId=$(az k8s-extension show -g aks-demo -c aks-demo --cluster-type connectedClusters --name arc-data-services --query id -o tsv)
            # az customlocation create -g aks-demo -n aks-demo-location --namespace azure-arc \
            #   --host-resource-id ${hostClusterId} \
            #   --cluster-extension-ids ${extensionId} --location westeurope

      #       az k8s-configuration create -c aks-demo \
      #         --cluster-type connectedClusters \
      #         -n common \
      #         -g aks-demo \
      #         --operator-type flux \
      #         --operator-params "'--git-readonly --git-path gitops/common'" \
      #         --repository-url https://github.com/tkubica12/aks-demo \
      #         --enable-helm-operator \
      #         --helm-operator-params '--set helm.versions=v3' \
      #         --scope cluster

      
